import React, { useEffect, useState } from "react";
import { Link, NavLink } from "react-router-dom";
import { CiTimer } from "react-icons/ci";
import { Avatar, Tooltip } from "antd";
import { MdOutlineVerified } from "react-icons/md";
import { UserOutlined } from "@ant-design/icons";
import Tool from "./Tool";
import { Spin } from "antd";
import { LoadingOutlined } from "@ant-design/icons";
import { useDispatch } from "react-redux";
import Cookies from "js-cookie";
import { get_api } from "../../services/fetchapi";
import { jwtDecode } from "jwt-decode";
import { setNewUser } from "../../reducers/userSlice";
import handleCompareDate from "../../utils/compareData";

export default function Home() {
    const [quiz, setQuiz] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const dispatch = useDispatch();
    const token = Cookies.get("token");
    useEffect(() => {
        const fetchProfileAndQuiz = async () => {
            try {
                const decoded = token ? jwtDecode(token) : null;
                const userId = decoded?.user?.id;

                // T·∫°o c√°c promise cho c·∫£ hai API
                const profilePromise = userId ? get_api("/profile/" + userId) : Promise.resolve(null);
                const quizPromise = get_api("/quiz");

                // Th·ª±c hi·ªán song song c√°c l·ªánh g·ªçi API
                const [profileResponse, quizResponse] = await Promise.all([profilePromise, quizPromise]);

                // C·∫≠p nh·∫≠t state v√† dispatch k·∫øt qu·∫£ t·ª´ profile API
                if (profileResponse) {
                    dispatch(setNewUser(profileResponse.user));
                }

                // C·∫≠p nh·∫≠t state v·ªõi k·∫øt qu·∫£ t·ª´ quiz API
                setQuiz(quizResponse.quiz);
            } catch (error) {
                console.error("Error fetching data:", error);
            } finally {
                // K·∫øt th√∫c loading
                setIsLoading(false);
            }
        };

        // Ch·ªâ g·ªçi fetch khi c√≥ token
        if (token !== undefined) {
            fetchProfileAndQuiz();
        }
    }, [dispatch, token]);
    return (
        <div className=" ">
            <div className="">
                <div className="bg-white p-5">
                    <h1 className="text-xl md:text-2xl text-green-700 font-bold">Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi QuizzEt</h1>
                    <p className="text-sm md:text-md text-gray-500">
                        QuizzEt l√† trang web gi√∫p b·∫°n t·∫°o ra c√°c b√†i quiz online m·ªôt c√°ch d·ªÖ d√†ng v√† nhanh ch√≥ng. B·∫°n c√≥ th·ªÉ t·∫°o ra c√°c c√¢u h·ªèi, tr·∫£ l·ªùi v√† chia s·∫ª v·ªõi b·∫°n b√®.
                    </p>
                </div>
                <div className="bg-white p-5 mt-2 text-red-500 flex justify-between items-center flex-col md:flex-row gap-3 md:gap-0">
                    <p>B·∫°n c√≥ th·ªÉ th√™m b√†i quiz m·ªõi ·ªü ƒë√¢y</p>
                    <Link to="/post">
                        <button className="bg-green-500 text-white">Th√™m b√†i m·ªõi</button>
                    </Link>
                </div>
                {isLoading ? (
                    <div className="h-[400px] flex items-center justify-center w-full bg-white p-5 mt-2">
                        <Spin indicator={<LoadingOutlined spin />} size="large" />
                    </div>
                ) : (
                    <div className="bg-white p-5 mt-2 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                        {quiz &&
                            quiz?.map((item) => (
                                <div key={item._id}>
                                    <div className=" shadow-md border-2 rounded-lg overflow-hidden">
                                        <Link to={`/quiz/${item.slug}`} className="block w-full h-[150px] overflow-hidden">
                                            <img src={item.img} alt="" className="h-full w-full object-cover hover:scale-110 duration-300" />
                                        </Link>
                                        <div className="p-3">
                                            <Link to={`/profile/${item.uid._id}`} className="flex items-center gap-2 mb-3 ">
                                                <div className="w-[40px] h-[40px] md:w-[35px] md:h-[35px] rounded-full overflow-hidden">
                                                    <img src={item.uid.profilePicture} alt="" className="object-cover h-full" />
                                                </div>
                                                <div className="group">
                                                    <div className="flex items-center gap-1">
                                                        <h2 className="text-gray-800 text-sm line-clamp-1 overflow-hidden group-hover:underline">{item.uid.displayName}</h2>
                                                        {item.uid.verify ? (
                                                            <Tooltip title="T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c">
                                                                <MdOutlineVerified color="#3b82f6" />
                                                            </Tooltip>
                                                        ) : (
                                                            ""
                                                        )}
                                                    </div>
                                                    <p className="text-gray-400 text-[10px] flex gap-1 items-center">
                                                        <CiTimer color="#1f2937" /> {handleCompareDate(item.date)}
                                                    </p>
                                                </div>
                                            </Link>
                                            <h1 className="text-lg h-[28px] lg:h-[56px] font-bold text-gray-800">{item.title}</h1>
                                            <p className="text-gray-700 line-clamp-2 h-[23px] lg:h-[45px] my-3 text-[15px]">{item.content}</p>
                                            <div className="flex justify-between items-center">
                                                <p>L∆∞·ª£t l√†m: {item.noa}</p>
                                                <Link to={`/quiz/${item.slug}`} className="text-right">
                                                    <button className="bg-green-600 text-white">L√†m b√†i ngay</button>
                                                </Link>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))}
                    </div>
                )}

                <div className="bg-white p-5 mt-2 text-red-500 ">
                    <h1 className="text-xl md:text-2xl text-green-700 font-bold">M·ªôt s·ªë t√†i li·ªáu √¥n c√°c m√¥n chuy√™n ng√†nh</h1>
                    <p className="text-sm md:text-md text-gray-500">N·∫øu b·∫°n c√≥ t√†i li·ªáu c·∫ßn ƒë∆∞a l√™n web? b·∫•m v√†o n√∫t d∆∞·ªõi ƒë·ªÉ g·ª≠i t√†i li·ªáu cho m√¨nh nh√° üòçüòç</p>
                    <a href="mailto: thngan25k3@gmail.com">
                        <button className="bg-green-500 text-white mt-2">Y√™u c·∫ßu t√†i li·ªáu m·ªõi</button>
                    </a>
                </div>
                <div className="bg-white ">
                    <Tool />
                </div>
            </div>
        </div>
    );
}
